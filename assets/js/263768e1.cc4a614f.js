"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2529],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),y=i,m=u["".concat(c,".").concat(y)]||u[y]||p[y]||o;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},5138:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var r=n(8168),i=n(8587),o=(n(6540),n(5680)),a=["components"],s={id:"identity-documents",title:"Identity Documents",sidebar_label:"Identity Documents"},c=void 0,l={unversionedId:"dta-details/identity-documents",id:"dta-details/identity-documents",title:"Identity Documents",description:"The first problem that a Milagro D-TA aims to solve is how entities in the system can identify and trust each other. In order to participate in the Milagro D-TA ecosystem each entity must publish a set of public keys into IPFS. The IPFS hash for an identity documents is then the ID for each entity running a D-TA.",source:"@site/../docs/dta-details/identity-documents.md",sourceDirName:"dta-details",slug:"/dta-details/identity-documents",permalink:"/docs/dta-details/identity-documents",draft:!1,tags:[],version:"current",frontMatter:{id:"identity-documents",title:"Identity Documents",sidebar_label:"Identity Documents"},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/dta-details/configuration"},next:{title:"Encrypted Envelope",permalink:"/docs/dta-details/encrypted-envelope"}},d={},u=[],p={toc:u},y="wrapper";function m(e){var t=e.components,n=(0,i.A)(e,a);return(0,o.yg)(y,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"The first problem that a Milagro D-TA aims to solve is how entities in the system can identify and trust each other. In order to participate in the Milagro D-TA ecosystem each entity must publish a set of public keys into IPFS. The IPFS hash for an identity documents is then the ID for each entity running a D-TA."),(0,o.yg)("p",null,"In order to create an identity document Milagro D-TA provides the following endpoint."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"http://localhost:3000/swagger/index.html#/identity/createIdentity"},"POST: /identity")," - An Identity Document contains public keys for signing and key encapsulation. "),(0,o.yg)("admonition",{title:"The Milagro DTA communication protocol uses protobufs for serialization. ",type:"note"},(0,o.yg)("p",{parentName:"admonition"},(0,o.yg)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/"},"Click here for more information about Protocol Buffers"),".")),(0,o.yg)("p",null,"The definition of an identity document is:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},"\nmessage IDDocument {\n    string IDDocumentCID            = 2 ;\n    string AuthenticationReference  = 3 ;\n    string BeneficiaryECPublicKey   = 4 ;    \n    string SikePublicKey            = 5 ;\n    string BlsPublicKey             = 6 ;\n    int64 Timestamp                 = 7 ;\n}\n\n\n")),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("inlineCode",{parentName:"li"},"AuthenticationReference")," refers to Milagro's out of the box ",(0,o.yg)("a",{parentName:"li",href:"/docs/dta-details/authentication"},"oAuth integration"),".")),(0,o.yg)("p",null,"The node that is used to create an Identity Document will store the seed and secret keys associated with the Identity. In the RC1 release these will be stored as a JSON file in the key value store:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'\n//IdentitySecrets - keys required for decryption and signing\ntype IdentitySecrets struct {\n    Name            string `json:"name"`\n    Seed            string `json:"seed"`\n    SikeSecretKey   string `json:"sikeSecretKey"`\n    BlsSecretKey    string `json:"BlsSecretKey"`\n}\n\n')))}m.isMDXComponent=!0}}]);